/**
 * üé¨ MovieFlix Demo Routes
 * Sistema de rutas condicionales seg√∫n modo de operaci√≥n
 * DEMO_MODE=true ‚Üí DemoController (datos simulados)
 * DEMO_MODE=false ‚Üí ProductionController (MySQL real)
 */

const express = require("express");
const { isDemoMode } = require("../middleware/demoMode");
const DemoController = require("../controllers/demoController");

const router = express.Router();

// üé≠ Middleware para indicar modo demo
router.use((req, res, next) => {
  if (isDemoMode) {
    res.setHeader("X-Demo-Mode", "true");
    res.setHeader("X-Data-Source", "simulated");
  } else {
    res.setHeader("X-Demo-Mode", "false");
    res.setHeader("X-Data-Source", "mysql");
  }
  next();
});

/**
 * CONFIGURACI√ìN CONDICIONAL DE RUTAS
 * Si DEMO_MODE=true, todas las rutas usan DemoController
 * Si DEMO_MODE=false, las rutas se manejan en server.js principal
 */

if (isDemoMode) {
  console.log("üé≠ DEMO MODE ACTIVADO - Usando datos simulados");

  // üîê Autenticaci√≥n
  router.post("/authenticate", DemoController.authenticate);

  // üë• Perfiles
  router.get("/profiles", DemoController.getProfiles);
  router.post("/profiles", DemoController.createProfile);
  router.delete("/profiles/:id", DemoController.deleteProfile);

  // üé¨ Contenido
  router.get("/content", DemoController.getContent);
  router.post("/content", DemoController.addContent);
  router.put("/content/:id", DemoController.updateContent);
  router.delete("/content/:id", DemoController.deleteContent);
  router.patch("/content/:id/watch", DemoController.markAsWatched);
  router.patch("/content/:id/unwatch", DemoController.markAsPending);

  // üèÜ Top content
  router.get("/top/movies", DemoController.getTopMovies);
  router.get("/top/series", DemoController.getTopSeries);

  // üîç B√∫squedas
  router.get("/search/suggestions", DemoController.getSearchSuggestions);

  // üéØ Plataformas
  router.get("/platforms", DemoController.getPlatforms);

  // üí´ Health check
  router.get("/health", DemoController.healthCheck);
} else {
  console.log("üöÄ PRODUCTION MODE - Usando MySQL database");

  // En modo producci√≥n, las rutas se manejan en server.js
  // Este archivo solo act√∫a como middleware informativo
  router.use((req, res, next) => {
    // Las rutas de producci√≥n se definen en server.js
    next();
  });
}

module.exports = router;
