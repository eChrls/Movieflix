# ==========================================
# MovieFlix - Docker Configuration
# ==========================================
# Configuración para desarrollo con contenedores

version: '3.8'

services:
  # ==========================================
  # Base de Datos MySQL
  # ==========================================
  database:
    image: mysql:8.0
    container_name: movieflix-db
    restart: unless-stopped

    environment:
      MYSQL_ROOT_PASSWORD: root_password_2025
      MYSQL_DATABASE: movieflix_db
      MYSQL_USER: movieflix_user
      MYSQL_PASSWORD: movieflix_password_2025

    ports:
      - "3306:3306"

    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/scripts:/docker-entrypoint-initdb.d

    networks:
      - movieflix-network

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # ==========================================
  # Backend API
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: movieflix-api
    restart: unless-stopped

    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: movieflix_db
      DB_USER: movieflix_user
      DB_PASSWORD: movieflix_password_2025

    ports:
      - "3001:3001"

    volumes:
      - ./backend:/app
      - /app/node_modules

    depends_on:
      database:
        condition: service_healthy

    networks:
      - movieflix-network

    command: npm run dev

  # ==========================================
  # Frontend React
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: movieflix-web
    restart: unless-stopped

    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001/api

    ports:
      - "3000:3000"

    volumes:
      - ./frontend:/app
      - /app/node_modules

    depends_on:
      - backend

    networks:
      - movieflix-network

    command: npm start

  # ==========================================
  # Nginx Proxy (Para producción)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: movieflix-proxy
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend_build:/usr/share/nginx/html

    depends_on:
      - frontend
      - backend

    networks:
      - movieflix-network

    profiles:
      - production

  # ==========================================
  # Redis (Para cache futuro)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: movieflix-cache
    restart: unless-stopped

    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data

    networks:
      - movieflix-network

    profiles:
      - cache

# ==========================================
# Volúmenes Persistentes
# ==========================================
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  frontend_build:
    driver: local

# ==========================================
# Red de Contenedores
# ==========================================
networks:
  movieflix-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
