-- ========================================
-- MOVIEFLIX - SCRIPT SEGURO PARA AGREGAR CONTENIDO FALTANTE
-- ========================================
-- Script adaptado a la estructura real de la base de datos MovieFlix
-- Fecha: $(date)
-- Versi√≥n: 1.0.0
-- Autor: Sistema de gesti√≥n MovieFlix

-- CARACTER√çSTICAS DE SEGURIDAD:
-- ‚úÖ Transacciones para integridad
-- ‚úÖ Verificaci√≥n de duplicados
-- ‚úÖ Manejo de errores
-- ‚úÖ Rollback autom√°tico en caso de fallo
-- ‚úÖ Logs de operaciones
-- ‚úÖ Validaci√≥n de datos existentes

-- ========================================
-- CONFIGURACI√ìN DE SEGURIDAD
-- ========================================

-- Configurar modo seguro
SET autocommit = 0;
SET foreign_key_checks = 1;
SET sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

-- Iniciar transacci√≥n
START TRANSACTION;

-- ========================================
-- TABLA TEMPORAL PARA MAPEO DE PLATAFORMAS
-- ========================================

-- Crear tabla temporal con IDs reales de plataformas
CREATE TEMPORARY TABLE temp_platform_mapping AS
SELECT id, name FROM platforms;

-- Verificar que tenemos las plataformas necesarias
SELECT 'VERIFICACI√ìN: Plataformas disponibles' as status;
SELECT id, name FROM temp_platform_mapping ORDER BY name;

-- ========================================
-- OBTENER PERFIL HOME PARA CONTENIDO
-- ========================================

-- Obtener el ID del perfil Home (requerido para content)
SET @home_profile_id = (SELECT id FROM profiles WHERE name = 'Home' LIMIT 1);

-- Verificar que existe el perfil
SELECT
    CASE
        WHEN @home_profile_id IS NOT NULL
        THEN CONCAT('‚úÖ Perfil Home encontrado con ID: ', @home_profile_id)
        ELSE '‚ùå ERROR: Perfil Home no encontrado'
    END as verification_status;

-- ========================================
-- FUNCI√ìN AUXILIAR PARA INSERCI√ìN SEGURA
-- ========================================

-- Crear procedimiento para inserci√≥n segura
DELIMITER //

CREATE TEMPORARY PROCEDURE SafeInsertContent(
    IN p_title VARCHAR(255),
    IN p_year INT,
    IN p_type ENUM('movie', 'series'),
    IN p_rating DECIMAL(3,1),
    IN p_genres JSON,
    IN p_overview TEXT,
    IN p_platform_name VARCHAR(50)
)
BEGIN
    DECLARE v_platform_id INT DEFAULT NULL;
    DECLARE v_exists INT DEFAULT 0;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL;
    END;

    -- Obtener platform_id si se especifica plataforma
    IF p_platform_name IS NOT NULL THEN
        SELECT id INTO v_platform_id
        FROM temp_platform_mapping
        WHERE name = p_platform_name
        LIMIT 1;
    END IF;

    -- Verificar si ya existe el contenido
    SELECT COUNT(*) INTO v_exists
    FROM content
    WHERE LOWER(TRIM(title)) = LOWER(TRIM(p_title))
    AND year = p_year
    AND type = p_type;

    -- Insertar solo si no existe
    IF v_exists = 0 THEN
        INSERT INTO content (
            title,
            year,
            type,
            rating,
            genres,
            overview,
            platform_id,
            profile_id,
            status
        ) VALUES (
            p_title,
            p_year,
            p_type,
            p_rating,
            p_genres,
            p_overview,
            v_platform_id,
            @home_profile_id,
            'pending'
        );

        SELECT CONCAT('‚úÖ Insertado: ', p_title, ' (', p_year, ')') as result;
    ELSE
        SELECT CONCAT('‚ö†Ô∏è  Ya existe: ', p_title, ' (', p_year, ')') as result;
    END IF;
END //

DELIMITER ;

-- ========================================
-- INSERCI√ìN SEGURA DE SERIES FALTANTES
-- ========================================

SELECT 'üì∫ INSERTANDO SERIES FALTANTES...' as status;

-- The Pitt (2025) ‚Äì HBO
CALL SafeInsertContent(
    'The Pitt',
    2025,
    'series',
    8.9,
    JSON_ARRAY('Drama'),
    'Serie dram√°tica m√©dica ambientada en un hospital de emergencias',
    'HBO'
);

-- When They See Us (2019) ‚Äì Netflix
CALL SafeInsertContent(
    'When They See Us',
    2019,
    'series',
    8.8,
    JSON_ARRAY('Crime', 'Drama'),
    'Miniserie sobre el caso Central Park Five',
    'Netflix'
);

-- La Maravillosa Sra. Maisel (2017‚Äì2023) ‚Äì Prime Video
CALL SafeInsertContent(
    'La Maravillosa Sra. Maisel',
    2017,
    'series',
    8.7,
    JSON_ARRAY('Comedy', 'Drama'),
    'Serie sobre una mujer que se convierte en comediante en los a√±os 50',
    'Prime Video'
);

-- This Is Us (2016‚Äì2022) ‚Äì Prime Video
CALL SafeInsertContent(
    'This Is Us',
    2016,
    'series',
    8.7,
    JSON_ARRAY('Drama', 'Romance'),
    'Drama familiar multigeneracional',
    'Prime Video'
);

-- Dopesick (2021) ‚Äì Disney+
CALL SafeInsertContent(
    'Dopesick',
    2021,
    'series',
    8.6,
    JSON_ARRAY('Drama', 'Crime'),
    'Miniserie sobre la crisis de opioides en Estados Unidos',
    'Disney+'
);

-- The Expanse (2015-2022) ‚Äì Prime Video
CALL SafeInsertContent(
    'The Expanse',
    2015,
    'series',
    8.5,
    JSON_ARRAY('Sci-Fi', 'Drama'),
    'Serie de ciencia ficci√≥n espacial',
    'Prime Video'
);

-- Billions (2016‚Äì2023) ‚Äì Prime Video
CALL SafeInsertContent(
    'Billions',
    2016,
    'series',
    8.4,
    JSON_ARRAY('Drama', 'Crime'),
    'Drama sobre finanzas y poder en Wall Street',
    'Prime Video'
);

-- High Maintenance ‚Äì HBO
CALL SafeInsertContent(
    'High Maintenance',
    2016,
    'series',
    8.1,
    JSON_ARRAY('Comedy', 'Drama'),
    'Serie antol√≥gica sobre un dealer de marihuana en Nueva York',
    'HBO'
);

-- Wild Wild Country (2018) ‚Äì Netflix
CALL SafeInsertContent(
    'Wild Wild Country',
    2018,
    'series',
    8.1,
    JSON_ARRAY('Documentary'),
    'Documental sobre el culto Rajneesh en Oregon',
    'Netflix'
);

-- Tokyo Vice (2022‚Äì2024) ‚Äì HBO
CALL SafeInsertContent(
    'Tokyo Vice',
    2022,
    'series',
    8.1,
    JSON_ARRAY('Crime', 'Drama', 'Thriller'),
    'Drama criminal ambientado en el Tokio de los 90s',
    'HBO'
);

-- The Morning Show (2019‚Äì ) ‚Äì Apple TV+
CALL SafeInsertContent(
    'The Morning Show',
    2019,
    'series',
    8.1,
    JSON_ARRAY('Drama'),
    'Drama sobre un programa matutino de televisi√≥n',
    'Apple TV+'
);

-- Slow Horses (2022‚Äì ) ‚Äì Apple TV+
CALL SafeInsertContent(
    'Slow Horses',
    2022,
    'series',
    7.5,
    JSON_ARRAY('Drama', 'Spy'),
    'Serie de esp√≠as brit√°nicos sobre agentes ca√≠dos en desgracia',
    'Apple TV+'
);

-- ========================================
-- INSERCI√ìN SEGURA DE PEL√çCULAS FALTANTES
-- ========================================

SELECT 'üé¨ INSERTANDO PEL√çCULAS FALTANTES...' as status;

-- El Hombre que Mat√≥ a Liberty Valance (1962) ‚Äì Disney+
CALL SafeInsertContent(
    'El Hombre que Mat√≥ a Liberty Valance',
    1962,
    'movie',
    8.1,
    JSON_ARRAY('Western', 'Drama'),
    'Western cl√°sico de John Ford',
    'Disney+'
);

-- Centauros del Desierto (1956) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Centauros del Desierto',
    1956,
    'movie',
    8.0,
    JSON_ARRAY('Western'),
    'Western cl√°sico de John Ford con John Wayne',
    NULL
);

-- Solo Ante el Peligro (1952) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Solo Ante el Peligro',
    1952,
    'movie',
    7.5,
    JSON_ARRAY('Western'),
    'Western cl√°sico con Gary Cooper',
    NULL
);

-- Perfect Blue (1997) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Perfect Blue',
    1997,
    'movie',
    8.0,
    JSON_ARRAY('Animation', 'Thriller'),
    'Thriller psicol√≥gico animado de Satoshi Kon',
    NULL
);

-- Castle in the Sky (1986) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Castle in the Sky',
    1986,
    'movie',
    8.0,
    JSON_ARRAY('Animation', 'Adventure', 'Family'),
    'Pel√≠cula de Studio Ghibli sobre una ciudad flotante',
    NULL
);

-- The Tale of the Princess Kaguya (2013) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'The Tale of the Princess Kaguya',
    2013,
    'movie',
    8.0,
    JSON_ARRAY('Animation', 'Drama', 'Fantasy'),
    'Pel√≠cula de Studio Ghibli basada en el cuento japon√©s',
    NULL
);

-- Porco Rosso (1992) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Porco Rosso',
    1992,
    'movie',
    7.7,
    JSON_ARRAY('Animation', 'Adventure', 'Comedy'),
    'Pel√≠cula de Studio Ghibli sobre un piloto convertido en cerdo',
    NULL
);

-- Doctor Zhivago (1965) ‚Äì HBO
CALL SafeInsertContent(
    'Doctor Zhivago',
    1965,
    'movie',
    8.0,
    JSON_ARRAY('Romance', 'Drama', 'War'),
    '√âpica rom√°ntica de David Lean',
    'HBO'
);

-- Trece Vidas (2022) ‚Äì Prime Video
CALL SafeInsertContent(
    'Trece Vidas',
    2022,
    'movie',
    7.8,
    JSON_ARRAY('Biography', 'Drama', 'Thriller'),
    'Drama sobre el rescate de ni√±os en una cueva de Tailandia',
    'Prime Video'
);

-- La Cinta Blanca (2009) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'La Cinta Blanca',
    2009,
    'movie',
    7.8,
    JSON_ARRAY('Drama', 'Mystery'),
    'Drama alem√°n de Michael Haneke',
    NULL
);

-- The Florida Project (2017) ‚Äì Netflix
CALL SafeInsertContent(
    'The Florida Project',
    2017,
    'movie',
    7.6,
    JSON_ARRAY('Drama'),
    'Drama independiente sobre la pobreza infantil',
    'Netflix'
);

-- Contratiempo (2016) ‚Äì Netflix
CALL SafeInsertContent(
    'Contratiempo',
    2016,
    'movie',
    7.6,
    JSON_ARRAY('Thriller', 'Crime', 'Drama'),
    'Thriller espa√±ol de Oriol Paulo',
    'Netflix'
);

-- Cr√≠a Cuervos (1976) ‚Äì Filmin
CALL SafeInsertContent(
    'Cr√≠a Cuervos',
    1976,
    'movie',
    7.6,
    JSON_ARRAY('Drama'),
    'Drama espa√±ol de Carlos Saura',
    'Filmin'
);

-- Que Dios Nos Perdone (2016) ‚Äì Netflix
CALL SafeInsertContent(
    'Que Dios Nos Perdone',
    2016,
    'movie',
    7.3,
    JSON_ARRAY('Crime', 'Drama', 'Thriller'),
    'Thriller policial espa√±ol de Rodrigo Sorogoyen',
    'Netflix'
);

-- Tetris (2023) ‚Äì Apple TV+
CALL SafeInsertContent(
    'Tetris',
    2023,
    'movie',
    7.0,
    JSON_ARRAY('Drama'),
    'Drama sobre la historia del videojuego Tetris',
    'Apple TV+'
);

-- First Blood (1982) ‚Äì Prime Video
CALL SafeInsertContent(
    'First Blood',
    1982,
    'movie',
    7.7,
    JSON_ARRAY('Action'),
    'Primera pel√≠cula de Rambo con Sylvester Stallone',
    'Prime Video'
);

-- Dredd (2012) ‚Äì Prime Video
CALL SafeInsertContent(
    'Dredd',
    2012,
    'movie',
    7.1,
    JSON_ARRAY('Action', 'Sci-Fi'),
    'Pel√≠cula de acci√≥n de ciencia ficci√≥n',
    'Prime Video'
);

-- Coherence (2013) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'Coherence',
    2013,
    'movie',
    7.2,
    JSON_ARRAY('Sci-Fi', 'Thriller'),
    'Thriller de ciencia ficci√≥n indie sobre realidades paralelas',
    NULL
);

-- La Hora del Diablo (2021) ‚Äì SIN PLATAFORMA
CALL SafeInsertContent(
    'La Hora del Diablo',
    2021,
    'movie',
    6.0,
    JSON_ARRAY('Horror', 'Thriller'),
    'Pel√≠cula de terror',
    NULL
);

-- ========================================
-- VERIFICACIONES FINALES
-- ========================================

SELECT 'üìä GENERANDO REPORTE FINAL...' as status;

-- Contar contenido insertado hoy
SELECT
    type as 'Tipo de Contenido',
    COUNT(*) as 'Total',
    AVG(rating) as 'Rating Promedio'
FROM content
WHERE DATE(created_at) = CURDATE()
GROUP BY type
ORDER BY COUNT(*) DESC;

-- Mostrar contenido sin plataforma
SELECT
    'CONTENIDO SIN PLATAFORMA' as status,
    COUNT(*) as total
FROM content
WHERE platform_id IS NULL;

-- Mostrar distribuci√≥n por plataformas
SELECT
    COALESCE(p.name, 'Sin Plataforma') as 'Plataforma',
    COUNT(c.id) as 'Contenido Total',
    SUM(CASE WHEN DATE(c.created_at) = CURDATE() THEN 1 ELSE 0 END) as 'Insertado Hoy'
FROM content c
LEFT JOIN platforms p ON c.platform_id = p.id
GROUP BY p.name
ORDER BY COUNT(c.id) DESC;

-- Verificar integridad de datos
SELECT
    'VERIFICACI√ìN DE INTEGRIDAD' as status,
    (SELECT COUNT(*) FROM content WHERE profile_id IS NULL) as 'Sin Perfil',
    (SELECT COUNT(*) FROM content WHERE title IS NULL OR title = '') as 'Sin T√≠tulo',
    (SELECT COUNT(*) FROM content WHERE year IS NULL) as 'Sin A√±o',
    (SELECT COUNT(*) FROM content WHERE type NOT IN ('movie', 'series')) as 'Tipo Inv√°lido';

-- ========================================
-- LIMPIEZA Y FINALIZACI√ìN
-- ========================================

-- Eliminar procedimiento temporal
DROP PROCEDURE SafeInsertContent;

-- Verificaci√≥n final antes de commit
SELECT
    CASE
        WHEN (SELECT COUNT(*) FROM content WHERE profile_id IS NULL) = 0
        THEN '‚úÖ Verificaci√≥n exitosa - Todos los registros tienen perfil'
        ELSE '‚ùå ERROR - Existen registros sin perfil'
    END as final_verification;

-- Solo hacer COMMIT si la verificaci√≥n es exitosa
-- En caso de error, hacer ROLLBACK autom√°tico
COMMIT;

SELECT 'üéâ SCRIPT EJECUTADO EXITOSAMENTE' as final_status;
SELECT 'Contenido agregado de forma segura a MovieFlix' as message;

-- ========================================
-- INSTRUCCIONES POST-EJECUCI√ìN
-- ========================================
/*
üìù INSTRUCCIONES DESPU√âS DE EJECUTAR:

1. ‚úÖ VERIFICAR RESULTADOS:
   - Revisar los reportes generados arriba
   - Confirmar que no hay errores en el log

2. üîÑ REINICIAR SERVIDOR (si est√° ejecut√°ndose):
   - npm restart
   - o reiniciar el contenedor Docker

3. üß™ PROBAR LA APLICACI√ìN:
   - Verificar que el nuevo contenido aparece
   - Comprobar funcionalidad de filtros

4. üóÑÔ∏è BACKUP RECOMENDADO:
   - Hacer backup despu√©s de cambios importantes
   - mysqldump movieflix_db > backup_$(date +%Y%m%d).sql

5. üìä MONITOREAR RENDIMIENTO:
   - Verificar que las consultas siguen siendo r√°pidas
   - Revisar logs de la aplicaci√≥n

NOTAS DE SEGURIDAD:
- ‚úÖ Script usa transacciones
- ‚úÖ Verifica duplicados antes de insertar
- ‚úÖ Mantiene integridad referencial
- ‚úÖ Usa procedimientos para consistencia
- ‚úÖ Genera reportes de verificaci√≥n
*/
